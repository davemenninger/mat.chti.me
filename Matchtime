#!/usr/bin/env perl

use Mojolicious::Lite;
use Mojo::JSON qw(decode_json encode_json);
use Mojolicious::Plugin::Authentication;

app->plugin(
    authentication => {
        autoload_user => 1,
        load_user     => sub {
            my ( $app, $uid ) = @_;
            # uid from validate sub, return a user object
            return $uid;
        },
        validate_user => sub {
            my ( $app, $username, $password, $extradata ) = @_;
            # return a uid if validated
            return 1 if ( $username eq 'bender' && $password eq 'bending' );
            return;
        },
    },
);

my $clients = {};

my $dogs = {};

get '/' => sub {
    my $c = shift;
    $c->render( template => 'index' );
};

websocket '/dog' => sub {
    my $c = shift;

    app->log->debug( sprintf 'Client connected: %s', $c->tx );
    my $id = sprintf "%s", $c->tx->connection;
    $clients->{$id} = $c->tx;
    app->log->debug( 'id: ' . $id );

    init_dog( id => $id);

    # Opened
    $c->app->log->debug('WebSocket opened');

    # Allow inactivity indefinitely
    $c->inactivity_timeout(0);

    # Incoming message
    $c->on(
        message => sub {
            my ( $c, $msg ) = @_;
            $c->app->log->debug("incoming: $msg");
            if ( my $j = decode_json $msg ) {
                app->log->debug( $j->{cmd} );
                do_msg( c => $c , j => $j );
            }
            update_clients();
        }
    );

    # Closed
    $c->on(
        finish => sub {
            my ( $c, $code, $reason ) = @_;
            $c->app->log->debug("WebSocket closed with status $code");
            delete $clients->{$id};
            delete $dogs->{$id};
            update_clients();
        }
    );
};

sub do_msg {
    my (%args) = @_;

    my $c        = $args{c};
    my $json_msg = $args{j};
    my $id = $c->tx->connection;

    for ( $json_msg->{cmd}) {
      if ('AUTHENTICATE') {
        $c->authenticate( $json_msg->{name}, $json_msg->{code} );
      }
      if ('DE_AUTHENTICATE'){
        $c->logout();
        $c->session( expires => 1 );
      }
      if ('MOVE'){
        move_dog( id => $id, direction => $json_msg->{direction}, distance => $json_msg->{distance} );
      }
    }

    $dogs->{$id}->{is_auth} = $c->is_user_authenticated;

    return;
}

sub update_clients {
    my (%args) = @_;

    for ( keys %$clients ) {
        $clients->{$_}->send(
            {
                json => {
                    wow  => $clients->{$_}->connection,
                    dogs => $dogs,
                }
            }
        );
    }

    return;
}

sub init_dog {
    my (%args) = @_;
    my $id = $args{id};
    $dogs->{$id}->{name} = $id;
    $dogs->{$id}->{x}    = int rand(630) + 10;
    $dogs->{$id}->{y}    = int rand(470) + 10;
    return;
}

sub move_dog {
  my (%args) = @_;

  $dogs->{$args{id}}->{y} -= ( $args{direction} eq 'up') ? $args{distance} : 0;
  $dogs->{$args{id}}->{y} += ( $args{direction} eq 'down') ? $args{distance} : 0;
  $dogs->{$args{id}}->{x} -= ( $args{direction} eq 'left') ? $args{distance} : 0;
  $dogs->{$args{id}}->{x} += ( $args{direction} eq 'right') ? $args{distance} : 0;

  return;
}

app->start;
__DATA__

@@ index.html.ep
% layout 'default';
% title 'mat.chti.me';
<h1>mat.chti.me</h1>
<p id='wow'>wow</p>
<button id='up' onclick="move('up');">up</button>
<button id='down' onclick="move('down');">down</button>
<button id='left' onclick="move('left');">left</button>
<button id='right' onclick="move('right');">right</button>
<br/>
<canvas id='map' width='640' height='480'></canvas>
<p id='list'>list</p>
<button id='login' onclick="login();">auth</button>
<button id='logout' onclick="logout();">deauth</button>
<input type='text' id='name' value='name'/>
<input type='password' id='code' value='code'/>

@@ layouts/default.html.ep
<!DOCTYPE html>
<html>
  <head><title><%= title %></title></head>
  <body>
<script>
      var ws = new WebSocket('<%= url_for('dog')->to_abs->scheme('wss') %>');

      var dogs = [];

      // Incoming messages
      ws.onmessage = function (event) {
        var res = JSON.parse(event.data);
        document.getElementById('wow').innerHTML = res.wow;
        document.getElementById('list').innerHTML = '';
        dogs = res.dogs;
        // update_dog_list();
        for ( var d in res.dogs ) {
          var dog = document.getElementById(d);
          if ( ! dog ){
            dog = document.createElement("div");
            dog.innerHTML = res.dogs[d].name;
            dog.innerHTML += ' ' + res.dogs[d].is_auth;
            dog.id = res.dogs[d].name;
            document.getElementById('list').appendChild(dog);
          }
        }
        draw();
      };

      // Outgoing messages
      ws.onopen = function (event) {
        ws.send(JSON.stringify({cmd:'init'}));
      };

      // Detect connect close
      ws.onclose = function (event) {
        document.getElementById('wow').innerHTML = 'lost connection <a href="javascript:window.location.href=window.location.href">reload</a>';
      };

      function login() {
        var name = document.getElementById('name').value;
        var code = document.getElementById('code').value;
        var cmd = 'AUTHENTICATE';
        var msg = { 'cmd': cmd, 'name': name, 'code': code };
        ws.send(JSON.stringify(msg));
      }

      function logout() {
        ws.send(JSON.stringify({cmd:'DE_AUTHENTICATE'}));
      }

      function draw() {
        var canvas = document.getElementById('map');
        if (canvas.getContext) {
          var ctx = canvas.getContext("2d");


          ctx.fillStyle = "#DDFFDD";
          ctx.fillRect (0, 0, 640, 480);

          for ( var d in dogs )
          {
            ctx.fillStyle = "rgba(0, 0, 200, 0.5)";
            ctx.fillRect( dogs[d].x, dogs[d].y, 42, 42);
          }
        }
      }

      function move(direction){
        var msg = { 'cmd': 'MOVE', 'direction': direction, 'distance': 5 };
        ws.send(JSON.stringify(msg));
      }

      function up() {
        msg = { 'cmd': 'up' };
        ws.send(JSON.stringify(msg));
      }

    </script>
  <%= content %>üêÑ</body>
</html>

#!/usr/bin/env perl

use Mojolicious::Lite;
use Mojo::JSON qw(decode_json encode_json);
use Mojolicious::Plugin::Authentication;

app->plugin(
    authentication => {
        autoload_user => 1,
        load_user     => sub {
            my ( $app, $uid ) = @_;
            # uid from validate sub, return a user object
            return $uid;
        },
        validate_user => sub {
            my ( $app, $username, $password, $extradata ) = @_;
            # return a uid if validated
            return 1 if ( $username eq 'bender' && $password eq 'bending' );
            return;
        },
    },
);

my $clients = {};

my $dogs = {};

my $cat = {
  x => 1,
  y => 5,
};

my $map = {
  width => 640,
  height => 480,
};

get '/' => sub {
    my $c = shift;
    $c->stash( map => $map );
    $c->render( template => 'index' );
};

get '/javascript.js' => sub {
    my $c = shift;
    $c->stash( map => $map );
    $c->render( template => 'javascript', format => 'js' );
};

websocket '/dog' => sub {
    my $c = shift;

    app->log->debug( sprintf 'Client connected: %s', $c->tx );
    my $id = sprintf "%s", $c->tx->connection;
    $clients->{$id} = $c->tx;
    app->log->debug( 'id: ' . $id );

    init_dog( id => $id);

    # Opened
    $c->app->log->debug('WebSocket opened');

    # Allow inactivity indefinitely
    $c->inactivity_timeout(0);

    # Incoming message
    $c->on(
        message => sub {
            my ( $c, $msg ) = @_;
            $c->app->log->debug("incoming: $msg");
            if ( my $j = decode_json $msg ) {
                app->log->debug( $j->{cmd} );
                do_msg( c => $c , j => $j );
            }
            update_clients();
        }
    );

    # Closed
    $c->on(
        finish => sub {
            my ( $c, $code, $reason ) = @_;
            $c->app->log->debug("WebSocket closed with status $code");
            delete $clients->{$id};
            delete $dogs->{$id};
            update_clients();
        }
    );
};

sub do_msg {
    my (%args) = @_;

    my $c        = $args{c};
    my $json_msg = $args{j};
    my $id = $c->tx->connection;

    given ( $json_msg->{cmd}) {
      when ('AUTHENTICATE') {
        $c->authenticate( $json_msg->{name}, $json_msg->{code} );
      }
      when ('DE_AUTHENTICATE'){
        $c->logout();
        $c->session( expires => 1 );
      }
      when ('MOVE'){
        if ( $c->is_user_authenticated ) {
            move_cat(
                direction => $json_msg->{direction},
                distance  => $json_msg->{distance}
            );
        }
        else {
            move_dog(
                id        => $id,
                direction => $json_msg->{direction},
                distance  => $json_msg->{distance}
            );
        }
      }
    }

    $dogs->{$id}->{is_auth} = $c->is_user_authenticated;

    return;
}

sub update_clients {
    my (%args) = @_;

    for ( keys %$clients ) {
        $clients->{$_}->send(
            {
                json => {
                    wow  => $clients->{$_}->connection,
                    dogs => $dogs,
                    cat => $cat,
                }
            }
        );
    }

    return;
}

sub init_dog {
    my (%args) = @_;
    my $id = $args{id};
    $dogs->{$id}->{name} = $id;
    $dogs->{$id}->{x}    = int rand(630) + 10;
    $dogs->{$id}->{y}    = int rand(470) + 10;
    return;
}

sub move_dog {
  my (%args) = @_;

  $dogs->{$args{id}}->{y} -= ( $args{direction} eq 'up') ? $args{distance} : 0;
  $dogs->{$args{id}}->{y} += ( $args{direction} eq 'down') ? $args{distance} : 0;
  $dogs->{$args{id}}->{x} -= ( $args{direction} eq 'left') ? $args{distance} : 0;
  $dogs->{$args{id}}->{x} += ( $args{direction} eq 'right') ? $args{distance} : 0;

  return;
}

sub move_cat {
  my (%args) = @_;

  $cat->{y} -= ( $args{direction} eq 'up') ? $args{distance} : 0;
  $cat->{y} += ( $args{direction} eq 'down') ? $args{distance} : 0;
  $cat->{x} -= ( $args{direction} eq 'left') ? $args{distance} : 0;
  $cat->{x} += ( $args{direction} eq 'right') ? $args{distance} : 0;

  return;
}

app->start;
__DATA__

@@ index.html.ep
% layout 'default';
% title 'mat.chti.me';
<h1>mat.chti.me</h1>
<p id='wow'>wow</p>
<canvas id='map' width='<%= $map->{width} %>' height='<%= $map->{height} %>'></canvas>
<br/>
<button id='up' onclick="move('up');">up</button>
<button id='down' onclick="move('down');">down</button>
<button id='left' onclick="move('left');">left</button>
<button id='right' onclick="move('right');">right</button>
<p id='list'>list</p>
<button id='login' onclick="login();">auth</button>
<button id='logout' onclick="logout();">deauth</button>
<input type='text' id='name' value='name'/>
<input type='password' id='code' value='code'/>

@@ layouts/default.html.ep
<!DOCTYPE html>
<html>
  <head><title><%= title %></title></head>
  <body>
    <script src="javascript.js"></script>
    <%= content %>🐄</body>
</html>
